
ext {
    android {
        def signInfo = signingInfo()

        signingConfigs {
            debug {
            }
            release {
                if (signInfo != null) {
                    storeFile file(signInfo['storeFile'])
                    keyAlias signInfo['keyAlias']
                    keyPassword signInfo['keyPassword']
                    storePassword signInfo['storePassword']
                }
            }
        }

        buildTypes {
            debug {
                signingConfig signingConfigs.debug
            }
            release {
                if (signInfo != null) {
                    signingConfig signingConfigs.release
                }
            }
        }
    }

    android.applicationVariants.all { variant ->
        def vCode = generateVerCode()
        def vName = generateVerName();
        println("generated VersionCode:" + vCode + ", VersionName:" + vName)

        variant.outputs.each { output ->
            output.versionNameOverride = vName
            output.versionCodeOverride = vCode
        }

        variant.outputs.all { output ->
            boolean unsigned = false
            if((outputFileName as String).contains('unsigned')){
                unsigned = true
            }
            def bTime = new Date().format("yyMMddHH")
            outputFileName = "${project.name}-${variant.name}-${vName}-${vCode}-${bTime}${unsigned ? '-unsigned' : ''}.apk"
            println("apk file name -> " + outputFileName)
        }
    }
}

/**
 * 获取keystore相关参数
 * @return a Properties
 */
def signingInfo(){
    Properties localProperties = new Properties()
    localProperties.load(file('../local.properties').newDataInputStream())

    Properties keystoreParam = new Properties();
    String propPath = localProperties['keystore.properties']
    if (propPath != null) {
        keystoreParam.load(file(propPath).newDataInputStream())
        return keystoreParam
    } else {
        return null
    }
}

// generate version name
def generateVerName(){
    def revisionDescriptionCMD = 'git describe'
    def vName = revisionDescriptionCMD.execute().text.trim()
    def matcher = vName =~ /\d+-\d+-/ // 判断‘v1.1' or 'v1.1-1-g123df6b'
    if (matcher) {    // regexp
        def s = vName.substring(1)     // remove first char 'v' of tag 'v1.1-1-g123df6b'
        def a = s.split("-")           // split it with '-'
        vName = a[0] + '.' + a[1]      // concatenate them for versionName
    } else {
        vName = vName + ".0"          // eg. '1.1' + '.0' = '1.1.0'
    }
    return vName
}

// generate version code
def generateVerCode(){
    def versionNumberCmd = 'git rev-list HEAD --count'
    System.out.println(versionNumberCmd)
    return versionNumberCmd.execute().text.trim().toInteger()
}

/**
 *
 * @param manifestContent
 * @param verName
 * @return modified manifestContent
 */
def replaceVerName(String manifestContent, verName){
    def result
    def replacement = String.format('android:versionName="%s"', verName)
    def m = manifestContent =~ /android:versionName="[\d\.]+"/
    if(m.find()){
        result =  manifestContent.replace(m.group(), replacement)
    }else{
        result = insertVer(manifestContent, replacement)
    }
    return result
}

/**
 *
 * @param manifestContent
 * @param verCode
 * @return modified manifestContent
 */
def replaceVerCode(String manifestContent, verCode){
    def result
    def replacement = String.format('android:versionCode="%s"', verCode)
    def m = manifestContent =~ /android:versionCode="\d+"/
    if(m.find()){
        result = manifestContent.replace(m.group(), replacement)
    } else {
        result = insertVer(manifestContent, replacement)
    }
    return result
}

/**
 * 插入版本信息
 * @param manifestContent
 * @param ver [android:versionName="x.x"] or [android:versionCode="x"]
 * @return modified manifestContent
 */
def insertVer(String manifestContent, ver){
    def result
    def m = manifestContent =~ /<manifest[\s\S]+?>/
    if(m.find()){
        def a = m.group() // 找到manifest开始标签<manifest ... package="xxx">
        StringBuilder sb = new StringBuilder(a)
        sb.insert(a.length() - 1, ' ' + ver) // 在开始标签中插入版本信息(属性之间加空格或换行)
        result = manifestContent.replace(a, sb) // 替换原来的manifest开始标签
    }
    return result
}